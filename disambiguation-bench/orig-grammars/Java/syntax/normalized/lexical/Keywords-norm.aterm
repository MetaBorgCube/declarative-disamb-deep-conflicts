Module(
  Unparameterized("normalized/lexical/Keywords-norm")
, []
, [ SDFSection(
      LexicalSyntax(
        [ SdfProduction(Sort("Keyword"), Rhs([Lit("\"abstract\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"assert\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"boolean\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"break\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"byte\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"case\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"catch\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"char\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"class\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"const\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"continue\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"default\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"do\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"double\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"else\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"enum\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"extends\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"final\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"finally\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"float\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"for\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"goto\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"if\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"implements\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"import\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"instanceof\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"int\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"interface\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"long\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"native\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"new\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"package\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"private\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"protected\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"public\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"return\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"short\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"static\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"strictfp\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"super\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"switch\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"synchronized\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"this\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"throw\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"throws\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"transient\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"try\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"void\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"volatile\"")]), NoAttrs())
        , SdfProduction(Sort("Keyword"), Rhs([Lit("\"while\"")]), NoAttrs())
        ]
      )
    )
  , SDFSection(
      LexicalRestrictions(
        [ Follow(
            [ Lit("\"abstract\"")
            , Lit("\"assert\"")
            , Lit("\"boolean\"")
            , Lit("\"break\"")
            , Lit("\"byte\"")
            , Lit("\"case\"")
            , Lit("\"catch\"")
            , Lit("\"char\"")
            , Lit("\"class\"")
            , Lit("\"const\"")
            , Lit("\"continue\"")
            , Lit("\"default\"")
            , Lit("\"do\"")
            , Lit("\"double\"")
            , Lit("\"else\"")
            , Lit("\"enum\"")
            , Lit("\"extends\"")
            , Lit("\"final\"")
            , Lit("\"finally\"")
            , Lit("\"float\"")
            , Lit("\"for\"")
            , Lit("\"goto\"")
            , Lit("\"if\"")
            , Lit("\"implements\"")
            , Lit("\"import\"")
            , Lit("\"instanceof\"")
            , Lit("\"int\"")
            , Lit("\"interface\"")
            , Lit("\"long\"")
            , Lit("\"native\"")
            , Lit("\"new\"")
            , Lit("\"package\"")
            , Lit("\"private\"")
            , Lit("\"protected\"")
            , Lit("\"public\"")
            , Lit("\"return\"")
            , Lit("\"short\"")
            , Lit("\"static\"")
            , Lit("\"strictfp\"")
            , Lit("\"super\"")
            , Lit("\"switch\"")
            , Lit("\"synchronized\"")
            , Lit("\"this\"")
            , Lit("\"throw\"")
            , Lit("\"throws\"")
            , Lit("\"transient\"")
            , Lit("\"try\"")
            , Lit("\"void\"")
            , Lit("\"volatile\"")
            , Lit("\"while\"")
            ]
          , Single(
              CharClass(
                Simple(
                  Present(
                    Conc(
                      Numeric("\\36")
                    , Conc(
                        Range(Numeric("\\48"), Numeric("\\57"))
                      , Conc(
                          Range(Numeric("\\65"), Numeric("\\90"))
                        , Conc(Numeric("\\95"), Range(Numeric("\\97"), Numeric("\\122")))
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        ]
      )
    )
  ]
)
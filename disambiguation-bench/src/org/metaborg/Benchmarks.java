package org.metaborg;
import java.io.File;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Set;

import org.metaborg.sdf2table.grammar.IProduction;
import org.metaborg.sdf2table.io.NormGrammarReader;
import org.metaborg.sdf2table.parsetable.ParseTable;
import org.metaborg.sdf2table.parsetable.ParseTable.DisambSemantics;

import com.google.common.collect.Lists;

public class Benchmarks {

	private final static String[] languages = { "Tiger", "IceDust", "Jasmin", "Java", "OCaml" };

	public static void main(String[] args) throws Exception {
		
		System.out.println("################# BENCHMARK #################");
		
		for (String lang : languages) {
			List<String> paths = Lists.newLinkedList();
			List<String> origPaths = Lists.newLinkedList();
			Path currentPath = Paths.get("").toAbsolutePath();
			String pathToSyntax = currentPath.toString() + "/norm-grammars/" + lang + "/syntax";
			String pathToOrigSyntax = currentPath.toString() + "/orig-grammars/" + lang + "/syntax";
			paths.add(pathToSyntax);
			origPaths.add(pathToOrigSyntax);
			File input = new File(pathToSyntax + "/normalized/" + lang + "-norm.aterm");
			File origInput = new File(pathToOrigSyntax + "/normalized/" + lang + "-norm.aterm");

			System.out.println("\n\nGenerating parse table for language: " + lang);
			ParseTable ptOldSemantics = new ParseTable(new NormGrammarReader(paths).readGrammar(input), false, false,
					false, DisambSemantics.SDF2_SEMANTICS);
			ParseTable ptNewSemantics = new ParseTable(new NormGrammarReader(paths).readGrammar(input), false, false,
					false, DisambSemantics.SDF3_SEMANTICS);

			System.out.println("Original Grammar");
			System.out.println("Productions : "
					+ new NormGrammarReader(origPaths).readGrammar(origInput).getUniqueProductionMapping().size());

			System.out.println("\nNormalized Grammar");
			System.out.println("Productions     : " + ptOldSemantics.productionLabels().size());
			System.out.println("States (unsafe) : " + ptOldSemantics.stateLabels().size());
			System.out.println("States (safe)   : " + ptNewSemantics.stateLabels().size());

			// expression grammars in both safe and unsafe semantics should be the same
			assert (ptOldSemantics.normalizedGrammar().getExpressionGrammars()
					.equals(ptNewSemantics.normalizedGrammar().getExpressionGrammars()));

			System.out.println("\nExpression Grammar");
			System.out.println(
					"Quantity     : " + ptNewSemantics.normalizedGrammar().getCombinedExpressionGrammars().size());
			int largestSize = 0;

			for (Set<IProduction> prods : ptNewSemantics.normalizedGrammar().getCombinedExpressionGrammars()) {
				if (prods.size() > largestSize) {
					largestSize = prods.size();
				}
			}

			System.out.println("Largest Size : " + largestSize);
			System.out.println("\nDisambiguation Rules");
			System.out.println(
					"Input              : " + new NormGrammarReader(paths).readGrammar(input).getInputPriorities());
			// -1 to not count the priority involving the non-terminal LAYOUT-CF generated
			// by SDF3
			System.out.println(
					"Transitive Closure : " + (ptNewSemantics.normalizedGrammar().priorities().keySet().size() - 1));

			System.out.println("\nContextual Grammar");
			ParseTable ptContextualGrammar = new ParseTable(new NormGrammarReader(paths).readGrammar(input), false,
					false, true, DisambSemantics.SDF3_SEMANTICS);
			ParseTable ptDDContextualGrammar = new ParseTable(new NormGrammarReader(paths).readGrammar(input), false,
					true, true, DisambSemantics.SDF3_SEMANTICS);

			// Number of productions and states of data-dependent contextual grammar should
			// be the same
			assert (ptDDContextualGrammar.productionLabels().size() == ptNewSemantics.productionLabels().size());
			assert (ptDDContextualGrammar.stateLabels().size() == ptNewSemantics.stateLabels().size());

			System.out.println("Productions (with deep conflicts)             : "
					+ ptContextualGrammar.normalizedGrammar().getProdContextualProdMapping().size());
			System.out.println("Productions (generated by contextual closure) : "
					+ ptContextualGrammar.normalizedGrammar().getDerivedContextualProds().size());
			System.out.println(
					"Productions (total)                           : " + ptContextualGrammar.productionLabels().size());
			System.out.println(
					"States                                        : " + ptContextualGrammar.stateLabels().size());

			System.out.println("-----------------------------------------------------");
		}
	}
}
